import numpy as np
import pandas as pd
from dtreeviz.trees import dtreeviz
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.ensemble import RandomForestClassifier,
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, classification_report
from sklearn import svm
from sklearn.metrics import confusion_matrix
from sklearn.inspection import plot_partial_dependence, permutation_importance
import seaborn as sns
import matplotlib.pyplot as plt
from dtreeviz.trees import dtreeviz
from sklearn.svm import SVC
from sklearn import metrics     
from sklearn.neighbors import KNeighborsClassifier
%matplotlib inline

x_train_class, x_test_class, y_train_class, y_test_class = train_test_split(X, y, random_state=0, test_size=0.33)
X contains explanatory variables and y contains four categories("closure+normal", "closure+abnormal","perforation+normal", and "perforation+abnormal")

rfr2 = RandomForestClassifier(n_estimators = 150, max_depth=6, max_features=4, random_state=0)
rfr2.fit(x_train_class, y_train_class)
print(rfr2.score(x_test_class, y_test_class))
print(rfr2.score(x_train_class, y_train_class))

feature = rfr2.feature_importances_
label = x_train_class.columns[0:]
indices = np.argsort(feature)[::1]

x = range(len(feature))
y = feature[indices]
y_label = label[indices]
plt.barh(x, y, align = 'center')
plt.yticks(x, y_label)
plt.xlabel("importance_num")
plt.ylabel("label")
plt.show()


predict_two_class = rfr2.predict(x_test_class)
print(predict_two_class)
plt.figure(figsize=(7, 7))
cm_two_class = confusion_matrix(y_test_class, predict_two_class)
cm_two_class = np.insert(cm_two_class, 3, 0, axis=0)
zero= np.array([0, 0,0,0,]).reshape(4,1)
cm_two_class = np.append(cm_two_class, zero, axis=1)
cm_two_class = pd.DataFrame(data=cm_two_class, index=["closure+normal", "closure+abnormal","perforation+normal", "perforation+abnormal"] , 
                           columns=["closure+normal", "closure+abnormal","perforation+normal", "perforation+abnormal"])
plot = sns.heatmap(cm_two_class, square=True, cbar=True, annot=True, cmap='Blues')
plt.title('Machine Learning Model',  fontsize=20)
plt.xlabel('Predicted classification', fontsize=14)
plt.ylabel('Postoperateve classificvation', fontsize=14)
plt.xticks(rotation=0)
plt.yticks(rotation=0)
